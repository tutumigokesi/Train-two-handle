#include <Keyboard.h>
#include <KeyboardLayout.h>
#include <Keyboard_da_DK.h>
#include <Keyboard_de_DE.h>
#include <Keyboard_es_ES.h>
#include <Keyboard_fr_FR.h>
#include <Keyboard_it_IT.h>
#include <Keyboard_sv_SE.h>

#define Hoon 12
#define Muzic_Hoon 11
#define FOR_HEAD_UP 10
#define FOR_HEAD_UNDER 9


#define PUSH_SHORT 100
#define PUSH_LONG 140000

#define BRAK_count 7
#define NOTTI_count 3

int analog_data_brak;
int before_analog_data_brak;
int count_analog_data_brak;

int analog_data_notti;
int before_analog_data_notti;
int count_analog_data_notti;

void setup() {
  // put your setup code here, to run once:
  Keyboard.begin();
  pinMode(12, INPUT);
  pinMode(11, INPUT);
  pinMode(10, INPUT);
  pinMode(9, INPUT);
  pinMode(A0, INPUT);
  //ブレーキ
  before_analog_data_brak = analogRead(A0);
  analog_data_brak = analogRead(A0);
  count_analog_data_brak = 1024 / BRAK_count;
  //ノッチ
  before_analog_data_notti = analogRead(A1);
  analog_data_notti = analogRead(A1);
  count_analog_data_notti = 1024 / NOTTI_count;
}

//各種押しボタン
int input() {
  if (digitalRead(Hoon) == 0) {
    return 1;
  } else if (digitalRead(Muzic_Hoon) == 0) {
    return 2;
  } else if (digitalRead(FOR_HEAD_UP) == 0) {
    return 3;
  } else if (digitalRead(FOR_HEAD_UNDER) == 0) {
    return 4;
  } else {
    return 0;
  }
}

//ブレーキ用
void send_for_brak(int a, int b) {  //抵抗の回す向きの関係上、値の変化と逆の増減をする
  int i = 0;
  if (a - b > 0) {
    i = 0;
    while (i < a - b) {
      Keyboard.print(",");
      i++;
      delay(10);
    }
  } else if (a - b <= 0) {
    i = 0;
    while (a - b < i) {
      Keyboard.print(".");
      i--;
      delay(10);
    }
  }
}

//ノッチ用
void send_for_notti(int a, int b) {  //抵抗の回す向きの関係上、値の変化と逆の増減をする
  int i = 0;
  if (a - b > 0) {
    i = 0;
    while (i < a - b) {  //段数が増える場合
      Keyboard.print("z");
      i++;
      delay(10);
    }
  } else if (a - b <= 0) {  //段数が減る場合
    i = 0;
    while (a - b < i) {
      Keyboard.print("a");
      i--;
      delay(10);
    }
  }
}

//各処理用
int count;
int data = 0;
int t;
int n;

void loop() {
  count = 0;

  //ブレーキ制御
  if (before_analog_data_brak - 10 < analogRead(A0) || analogRead(A0) < before_analog_data_brak + 10) {
    analog_data_brak = analogRead(A0) / count_analog_data_brak;  //段数
    t = millis();
    while (count < 1000 || (millis() - t) < 10) {
      if (analog_data_brak - 10 < analogRead(A0) || analogRead(A0) < analog_data_brak + 10) {
        count++;
      }
    }
    send_for_brak(analog_data_brak, before_analog_data_brak);
    before_analog_data_brak = analog_data_brak;
  }


  count = 0;


  //ノッチ制御
  if (before_analog_data_notti - 10 < analogRead(A1) || analogRead(A1) < before_analog_data_notti + 10) {
    analog_data_notti = analogRead(A1) / count_analog_data_notti;  //段数
    t = millis();
    while (count < 1000 || (millis() - t) < 10) {
      if (analog_data_notti - 10 < analogRead(A1) || analogRead(A1) < analog_data_notti + 10) {
        count++;
      }
    }
    send_for_notti(analog_data_notti, before_analog_data_notti);
    before_analog_data_notti = analog_data_notti;
  }

  count = 0;
  int hoon = 0;
  //各種スイッチ
  if (input() > 0) {
    data = input();
    t = millis();
    while (count < 1000 || (millis() - t) < 10) {
      if (input() == data) {
        count++;
      }
    }
    t = millis();
    switch (data) {
      case 1:
        Keyboard.write(KEY_RETURN);
        Keyboard.releaseAll();
        if (millis() - t > 500) {
          while (digitalRead(12) == 0) { Keyboard.write(KEY_RETURN); }
        };
        break;
      case 2:
        Keyboard.print("+");
        Keyboard.releaseAll();
        break;
      case 3:
        Keyboard.press(KEY_UP_ARROW);
        Keyboard.releaseAll();
        break;
      case 4:
        Keyboard.press(KEY_DOWN_ARROW);
        Keyboard.releaseAll();
        break;
      default: Keyboard.releaseAll();
    }
    delay(100);
  }
}
